export const createStore = (reducer, initialState) => {
    let state = initialState;
    const callbacks = [];

    const getState = () => state;

    const dispatch = action => {
        state = reducer(state, action);
        callbacks.forEach(foo => foo());
        
    };

    const subscribe = callback => {
        callbacks.push(callback);
        return () => callbacks.filter(cb => cb !== callback)
    }
    getState, dispatch, subscribe
    return { 
        subscribe: subscribe,
        getState: getState,
        dispatch: dispatch
     }
}



export const combineReducers = reducers => {
    var keys = Object.keys(reducers)
    console.log(keys)
    return function combination (state, action) {
      var hasChanged = false
      var nextState = {}
  
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i]
        // if (typeof reducers[key] !== 'function') throw new Error('reducer ' + key + 'must be a function')
        nextState[key] = reducers[key](state[key], action)
        hasChanged = hasChanged || nextState[key] !== state[key]
      }
  
      return hasChanged ? nextState : state
    }
}
